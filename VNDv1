#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Veiculo
{
    vector<int> rota;
    int custoCaminho;
};

int calcularCustoRota(const vector<int> &rota, const vector<vector<int>> &custoij)
{
    int custo = 0;
    for (size_t i = 0; i < rota.size() - 1; ++i)
    {
        custo += custoij[rota[i]][rota[i + 1]];
    }
    return custo;
}

void imprimirRota(const vector<int> &rota)
{
    for (size_t i = 0; i < rota.size(); ++i)
    {
        cout << rota[i] << " ";
    }
    cout << endl;
}

bool swapMelhoraRota(vector<int> &rota, int i, int j, const vector<vector<int>> &custoij)
{
    reverse(rota.begin() + i, rota.begin() + j + 1);
    int novoCusto = calcularCustoRota(rota, custoij);
    if (novoCusto < calcularCustoRota(rota, custoij))
    {
        return true;
    }
    else
    {
        reverse(rota.begin() + i, rota.begin() + j + 1); // Desfaz a troca se não houver melhoria
        return false;
    }
}

void VND(vector<int> &rota, const vector<vector<int>> &custoij)
{
    int custoAtual = calcularCustoRota(rota, custoij);
    bool melhoria = true;

    while (melhoria)
    {
        melhoria = false;

        for (size_t i = 1; i < rota.size() - 1; ++i)
        {
            for (size_t j = i + 1; j < rota.size(); ++j)
            {
                if (swapMelhoraRota(rota, i, j, custoij))
                {
                    melhoria = true;
                    cout << "Melhoria encontrada: Troca entre " << rota[i - 1] << " e " << rota[j] << endl;
                    cout << "Nova rota: ";
                    imprimirRota(rota);
                    cout << "Novo custo: " << calcularCustoRota(rota, custoij) << endl;
                    break; // Sai do loop interno se encontrar uma melhoria
                }
            }
            if (melhoria)
            {
                break; // Sai do loop externo se encontrar uma melhoria
            }
        }
    }
}

int main()
{
    // Suponha que você já tem uma rota inicial e uma matriz de custos custoij
    vector<int> rotaInicial = {0, 1, 2, 3, 4, 0}; // Exemplo de rota inicial
    vector<vector<int>> custoij = {
        {0, 10, 15, 20, 25, 30},
        {10, 0, 35, 25, 30, 40},
        {15, 35, 0, 30, 35, 45},
        {20, 25, 30, 0, 40, 50},
        {25, 30, 35, 40, 0, 55},
        {30, 40, 45, 50, 55, 0}}; // Exemplo de matriz de custos

    cout << "Rota inicial: ";
    imprimirRota(rotaInicial);
    cout << "Custo inicial: " << calcularCustoRota(rotaInicial, custoij) << endl;

    VND(rotaInicial, custoij);

    cout << "Rota otimizada: ";
    imprimirRota(rotaInicial);
    cout << "Custo otimizado: " << calcularCustoRota(rotaInicial, custoij) << endl;

    return 0;
}
